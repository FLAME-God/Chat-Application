// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id          Int              @id @default(autoincrement())
  username         String           @unique
  email            String           @unique
  password         String
  sentMessages     Messages[]       @relation("Sender")
  receivedMessages Messages[]       @relation("Recevier")
  sentRequests     FriendRequests[] @relation("SenderRequest")
  receivedRequests FriendRequests[] @relation("ReceiverRequest")
  userFriends1     Friends[]        @relation("UserFriends1")
  userFriends2     Friends[]        @relation("UserFriends2")
}

model Messages {
  message_id  Int    @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  message     String
  sender      Users  @relation("Sender", fields: [sender_id], references: [user_id])
  receiver    Users  @relation("Recevier", fields: [receiver_id], references: [user_id])
}

model FriendRequests {
  id          Int    @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  status      String @default("pending")
  sender      Users  @relation("SenderRequest", fields: [sender_id], references: [user_id])
  receiver    Users  @relation("ReceiverRequest", fields: [receiver_id], references: [user_id])
}

model Friends {
  id       Int   @id @default(autoincrement())
  user1_id Int
  user2_id Int
  user1    Users @relation("UserFriends1", fields: [user1_id], references: [user_id])
  user2    Users @relation("UserFriends2", fields: [user2_id], references: [user_id])
}
